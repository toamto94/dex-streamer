// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: service-definition.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// APIStreamClient is the client API for APIStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIStreamClient interface {
	StreamContract(ctx context.Context, in *Contract, opts ...grpc.CallOption) (APIStream_StreamContractClient, error)
}

type aPIStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIStreamClient(cc grpc.ClientConnInterface) APIStreamClient {
	return &aPIStreamClient{cc}
}

func (c *aPIStreamClient) StreamContract(ctx context.Context, in *Contract, opts ...grpc.CallOption) (APIStream_StreamContractClient, error) {
	stream, err := c.cc.NewStream(ctx, &APIStream_ServiceDesc.Streams[0], "/APIStream/StreamContract", opts...)
	if err != nil {
		return nil, err
	}
	x := &aPIStreamStreamContractClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type APIStream_StreamContractClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type aPIStreamStreamContractClient struct {
	grpc.ClientStream
}

func (x *aPIStreamStreamContractClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// APIStreamServer is the server API for APIStream service.
// All implementations must embed UnimplementedAPIStreamServer
// for forward compatibility
type APIStreamServer interface {
	StreamContract(*Contract, APIStream_StreamContractServer) error
	mustEmbedUnimplementedAPIStreamServer()
}

// UnimplementedAPIStreamServer must be embedded to have forward compatible implementations.
type UnimplementedAPIStreamServer struct {
}

func (UnimplementedAPIStreamServer) StreamContract(*Contract, APIStream_StreamContractServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamContract not implemented")
}
func (UnimplementedAPIStreamServer) mustEmbedUnimplementedAPIStreamServer() {}

// UnsafeAPIStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIStreamServer will
// result in compilation errors.
type UnsafeAPIStreamServer interface {
	mustEmbedUnimplementedAPIStreamServer()
}

func RegisterAPIStreamServer(s grpc.ServiceRegistrar, srv APIStreamServer) {
	s.RegisterService(&APIStream_ServiceDesc, srv)
}

func _APIStream_StreamContract_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Contract)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIStreamServer).StreamContract(m, &aPIStreamStreamContractServer{stream})
}

type APIStream_StreamContractServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type aPIStreamStreamContractServer struct {
	grpc.ServerStream
}

func (x *aPIStreamStreamContractServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

// APIStream_ServiceDesc is the grpc.ServiceDesc for APIStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var APIStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "APIStream",
	HandlerType: (*APIStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamContract",
			Handler:       _APIStream_StreamContract_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service-definition.proto",
}
